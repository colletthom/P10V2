@attribute [Authorize]
@page "/UpdatePatient/{id}"
@inject HttpClient HttpClient
@using System.Text.Json
@using System.Net
@using System.Text
@using System.Collections
@using System.ComponentModel.DataAnnotations
@using VModel
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager

<h3>Mise à jour du patient</h3>

@if (patient != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Détail</th>
                <th>Valeurs</th>
                <th>Valeurs à modifier</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Prénom</td>
                <td>@patient.Prenom</td>
                <td><input type="text" @bind="@patient.Prenom" required title="Le prénom est obligatoire" /></td>
            </tr>
            <tr>
                <td>Nom</td>
                <td>@patient.Nom</td>
                <td><input type="text" @bind="@patient.Nom" required title="Le nom est obligatoire" /></td>
            </tr>
            <tr>
                <td>Date de Naissance</td>
                <td>@patient.DateNaissance.ToShortDateString()</td>
                <td><input type="date" @bind="@patient.DateNaissance" required title="La date de naissance obligatoire" /></td>
            </tr>
            <tr>
                <td>Genre</td>
                <td>@patient.Genre</td>
                <select type="text" id="Genre" class="form-control" @bind="@patient.Genre" required title="Le genre (M ou F) est obligatoire">
                    <option value="">Sélectionnez le genre</option>
                    <option value="M">Masculin</option>
                    <option value="F">Feminin</option>
                </select>
            </tr>
            <tr>
                <td>Adresse</td>
                <td>@patient.AdressePostale</td>
                <td><input type="text" @bind="@patient.AdressePostale" /></td>
            </tr>
            <tr>
                <td>Téléphone</td>
                <td>@patient.Telephone</td>
                <td><input type="text" @bind="@patient.Telephone" /></td>
            </tr>
            <tr>
                <td></td>
                <td></td>
                <td><button @onclick="MiseAJourPatient">Mettre à jour</button></td>
            </tr>
            <tr>
                <td>@errorMessage</td>
            </tr>
        </tbody>
    </table>
}
else
{
    <p>
        <tr>Aucun patient trouvé.</tr>
        @errorMessage
    </p>
}

@code {
    [Parameter]
    public string id { get; set; }

    public PatientVM? patient;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            using var handler = new HttpClientHandler();
            handler.ClientCertificateOptions = ClientCertificateOption.Manual;
            handler.ServerCertificateCustomValidationCallback = (httpRequestMessage, cert, cetChain, policyErrors) =>
            {
                return true;
            };
            using var client = new HttpClient(handler);

            var patientId = int.Parse(id);
            patient = await client.GetFromJsonAsync<PatientVM>($"https://ApiGateway:5011/API/patient-back/{patientId}");

        }
        catch (HttpRequestException ex)
        {
            errorMessage = "Une erreur s'est produite lors de la récupération des patients : " + ex.Message + "\n" + ex.StackTrace;
        }
    }


    private async Task MiseAJourPatient()
    {
        try
        {

            var validationResults = new PatientVMValidation(patient).Validate();

            if (validationResults.Any())
            {
                errorMessage = "";
                foreach (var error in validationResults)
                {
                    errorMessage += $"{error.ErrorMessage}";
                }
                return;
            }


            using var handler = new HttpClientHandler();
            handler.ClientCertificateOptions = ClientCertificateOption.Manual;
            handler.ServerCertificateCustomValidationCallback = (httpRequestMessage, cert, cetChain, policyErrors) =>
            {
                return true;
            };
            using var client = new HttpClient(handler);

            var patientId = int.Parse(id);

            var jsonContent = new StringContent(JsonSerializer.Serialize(patient), Encoding.UTF8, "application/json");
            var response = await client.PutAsync($"https://ApiGateway:5011/API/patient-back/{patientId}", jsonContent);

            if (response.StatusCode == HttpStatusCode.OK)
            {
                // Mise à jour réussie
                errorMessage = "Mise à jour réussie";
                NavigationManager.NavigateTo($"UpdatePatient/{patient.Id}");
            }
            else
            {
                errorMessage = "Une erreur s'est produite lors de la mise à jour du patient : " + response.ReasonPhrase;
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = "Une erreur s'est produite lors de la mise à jour du patient : " + ex.Message + "\n" + ex.StackTrace;
        }
    }

    public class PatientVMValidation
    {
        private readonly PatientVM _patientVM; 

        public PatientVMValidation(PatientVM patientVM)
        {
            _patientVM = patientVM;
        }
        public IEnumerable<ValidationResult> Validate()
        {
            if (string.IsNullOrEmpty(_patientVM.Nom))
            {
                yield return new ValidationResult("Le nom est obligatoire.", new[] { nameof(PatientVM.Nom) });
            }

            if (string.IsNullOrEmpty(_patientVM.Prenom))
            {
                yield return new ValidationResult("Le prénom est obligatoire.", new[] { nameof(PatientVM.Prenom) });
            }

        }
    }
}